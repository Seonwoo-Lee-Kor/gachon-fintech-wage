#아두이노 데이터 산출
import serial   
import pandas as pd
ard=serial.Serial('COM5',9600) #아두니오와 파이썬 연결
s = ""
ard.inWaiting()  # 현재 아두이노에서 불러올 수 있는 값 확인

while ard.inWaiting() > 0 :
    s += ard.readline().decode() #복호화를 통해 bytes -> str으로 바꿔줍니다.

print(s)   # 산출된 데이터

    # 시간은 밀리초로 나오기때문에 0.000초로 나옵니다.

ard.inWaiting() #대기 중인 값 재확인
w=s.split(" ") #산출된 데이터 가공작업
count = w.count('Out,') # Out을 기준으로 하기 위해 먼저 Out한 개수 파악

# 3명의 데이터
p1=list()
p2=list()
p3=list()



for x in range(count) : 
    if float(w.index('Out,')) > 0 : # Out한 데이터가 있다면
        if w[w.index('Out,')-3][len(w[w.index('Out,')-3])-2:len(w[w.index('Out,')-3])-1]   == '1':  # ID가 1일때
            if len(w[w.index('Out,')+1]) >7 : # 시간자리가 7개 초과일때 (이유는 시간데이터 뒤에 \r\n 띄어쓰기도 포함되어 있습니다.)
                p1 += [w[w.index('Out,')+1][:-7]]   # Out한 시간데이터를 p1이라는 변수에 모으는 과정
                w.remove('Out,')                    # 모은 데이터를 제거하여 중복 방지 
            else :
                p1 += [w[w.index('Out,')+1][:-5]]   # 시간자리가 5개 초과일때(마지막에 Out한 시간데이터는 띄어쓰기가 없기 때문입니다.)
                w.remove('Out,')
      
        elif w[w.index('Out,')-3][len(w[w.index('Out,')-3])-2:len(w[w.index('Out,')-3])-1]    == '2':  # ID가 2일때
            if len(w[w.index('Out,')+1]) >7 :     
                p2 += [w[w.index('Out,')+1][:-7] ]
                w.remove('Out,')
            else :
                p2 += [w[w.index('Out,')+1][:-5]]
                w.remove('Out,')
      
        elif w[w.index('Out,')-3][len(w[w.index('Out,')-3])-2:len(w[w.index('Out,')-3])-1]    == '3':  # ID가 3일때
            if len(w[w.index('Out,')+1]) >7 :
                p3 += [w[w.index('Out,')+1][:-7]] 
                w.remove('Out,')
            else :
                p3 += [w[w.index('Out,')+1][:-5]]
                w.remove('Out,')
        



 # ID 1 인 사람 시간 data = p1
 # ID 2 인 사람 시간 data = p2
 # ID 3 인 사람 시간 data = p3

# 가정
# 현재 저희 코딩에서는 한달에 6번 일하도록 되어 있습니다.
# 이유는 한달이라는 데이터를 모으기 위해서는 한달이라는 시간이 필요했고 
# 저희는 계산식이 제대로 되는지 보여주기 위해 40시간 이상인경우 , 15시간이상 ~ 40시간미만인 경우, 15시간 미만인 경우가 필요합니다.
# 하여 초단위로 보여드리기 위해서는 6번이라는 한정된 횟수로 할 수 밖에 없었습니다.

#주 5일 일한다면 다음과 같이 데이터를 산출 할수 있습니다.
# work_time = pd.DataFrame([p[0],p[1],p[2],p[3],p[4],0,0],
#                          columns=["1st"],index=['mon','tue','wen','thu','fri','sat','sun'])
#
#    work_time['2nd']=(p[5],p[6],p[7],p[8],p[9],0,0)
#    work_time['3rd']=(p[10],p[11],p[12],p[13],p[14],0,0)
#    work_time['4th']=(p[15],p[16],p[17],p[18],p[19],0,0)
#    work_time['H']=(9500)
#    work_time
 
# 개인별로 모은 시간데이터를 이용하여 데이터프레임으로 변환하는 작업코드입니다.
# 핵심은 Out한 시간을 기준으로 가동되고 아직 Out하지 않았다면 0으로 산출됩니다.

# ID 1
for x in  range(6- len(p1)) :  # 6번미만으로 일했을 경우 나머지는 0으로 채워집니다.
    if 6 - len(p1) > 0 :
        p1 += ['0']
        
try :
    work_time1 = pd.DataFrame([p1[0],0,0,0,0,0,0], 
                          columns=["1st"],index=['mon','tue','wen','thu','fri','sat','sun'])

    work_time1['2nd']=(0,0,p1[1],0,0,0,0)
    work_time1['3rd']=(0,0,0,p1[2],0,p1[3],0)
    work_time1['4th']=(p1[4],0,0,p1[5],0,0,0)
    work_time1['H']=(9500)
    work_time1 # ID 1 인 사람의 한달 데이터

except:
        print("check Id 1 data")   

# ID 2
for x in  range(6- len(p2)) :
    if 6 - len(p2) > 0 :
        p2 += ['0']
        
try :
    work_time2 = pd.DataFrame([0,0,0,p2[0],0,0,0],
                          columns=["1st"],index=['mon','tue','wen','thu','fri','sat','sun'])

    work_time2['2nd']=(0,0,p2[1],0,0,p2[2],0)
    work_time2['3rd']=(0,0,0,p2[3],0,p2[4],0)
    work_time2['4th']=(0,0,0,p2[5],0,0,0)
    work_time2['H']=(9500)
    work_time2 # ID 2 인 사람의 한달 데이터

except:
        print("check Id 2 data")
    
# ID 3
for x in  range(6- len(p3)) :
    if 6 - len(p3) > 0 :
        p3 += ['0']
        
try :
    work_time3 = pd.DataFrame([0,p3[0],0,0,p3[1],0,0],
                          columns=["1st"],index=['mon','tue','wen','thu','fri','sat','sun'])

    work_time3['2nd']=(0,0,p3[2],0,0,0,0)
    work_time3['3rd']=(0,0,0,p3[3],p3[4],0,0)
    work_time3['4th']=(0,0,0,p3[5],0,0,0)
    work_time3['H']=(9500)
    work_time3 # ID 3 인 사람의 한달 데이터

except:
        print("check Id 3 data")

# 데이트프레임 저장
work_time1.to_pickle("work_time1.pkl")
work_time2.to_pickle("work_time2.pkl")
work_time3.to_pickle("work_time3.pkl")